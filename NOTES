
This file will be used to document the technologies and concepts used (and learnt) during the making of this app. 
This document also includes links (journals, documents and videos) that were used during the research process. 
Languages: HTML, CSS, Javascript

BACKEND
Technologies Used:
MongoDB Atlas(cloud db), Mongoose (library), MongoDB Compass
NodeJS
Express
Postman

FRONTEND
Technologies Used:
React
Redux
Heroku 
Axiom (http client for frontend?)


scripts: start (Node), server (Nodemon), Heroku-Postbuild (Heroku)
packages: path (NodeJS), NPM (express-async-handler, bcrypt, jsonwebtoken, colors, dotenv, mongoose (library),
                              express, nodemon (dev-dependency), concurrently (dev-dependency))
Frameworks: express (NPM), react, redux?

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NPM - Node Package Manager:
World's largest software registry. Open source developers use npm to share and borrow packages, 
and many organizations use npm to manage private development. npm consists of three distinct components:
1.the website
2. the Command Line Interface (CLI)
3. the registry
https://docs.npmjs.com/about-npm

Express:
Express is a minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.
https://expressjs.com/

Postman:
Postman is an API platform for building and using APIs.
To run a simple request to the server:
1. Create server.js
2. Run server.js on terminal: npm run server 
3. Run file that contains code to make request (in this case Postman).
https://www.youtube.com/watch?v=VywxIQ2ZXw4

Mongoose:
In simple terms, it is a JavaScript object-oriented programming library that creates a connection between MongoDB and the Express web application framework.
It interacts with routes (client requests and server responses).
Mongoose is our ODM, which means it works like a non-relational/NoSQL database.
https://www.mongodb.com/developer/article/mongoose-versus-nodejs-driver/

JWT - JSON Web Token:
JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.
The JWT can be encoded or decoded and consists of 3 parts: 
1. header: includes algorithm and token type (JWT is the type)
2. payload: Includes data in json format; can have whatever you want in the token. In our case, we include the user id.
            iat: Time the token was issued at
3. verify signature: ensures JWT has not been altered or tampered
The party that creates the token signs the header and payload with a secret that is known to both issuer and receiver OR a private key known only to issuer.
This means if we wanted to access a protected route we will have to send the token/header to access that specific protected route.

R.E.S.T. :
What does REST stand for? 
https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming
https://networkop.co.uk/blog/2016/01/01/rest-for-neteng/


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

CONCEPTS

Scripts:

Try & Catch (errors):
The try statement allows you to define a block of code to be tested for errors while it is being executed.
The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.
https://www.w3schools.com/js/js_errors.asp

Async Functions:
All Mongoose methods are Asynchronous (they return a 'promise'). An async function is a function declared with the 'async' keyword, 
and the 'await' keyword is permitted within it. 
The 'async' & 'await' keywords enable asynchronous, promise-based behavior to be written in a cleaner style, avoiding the need to explicitly configure promise chains.
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function

Promise chaining:
Promise chaining is a syntax that allows you to chain together multiple asynchronous tasks in a specific order. 
This is great for complex code where one asynchronous task needs to be performed after the completion of a different asynchronous task.
https://javascript.info/promise-chaining
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises

Routes:
To create a route we need an http client (ex. Postman), where we specify: 
1. Request: GET, PUT, POST, DELETE, etc. 
2. Server address: http://localhost:5000/api/goals (this gets goals)
ex. of route in javascript:
app.get('/api/goals', (req, res) =>{
    res.status(200).json({message: 'Get Goals' })
})
Where 'get' is the request type we are listening for, and '/api/goals' is the endpoint. 
Asynchronous functions send a string as a response (usually json object or array). It is also good practice to set a status.
We usually have more than one route, so we make a separate folder and files in the backend separating them.
Each resource in the API should have its own route file.
To protect our routes, we can use middleware (authMiddleware.js) to check the tokens during the req/res cycle (when a request to a route has been sent).
https://expressjs.com/en/starter/basic-routing.html

URI vs URL:

CRUD method:

Middleware:
are functions that runs during the req/res cycle (when a request to a route has been sent).
We use middleware for things like authentication (check tokens during the req/res cycle) or error handling.
https://expressjs.com/en/guide/writing-middleware.html#:~:text=Overview,the%20application's%20request%2Dresponse%20cycle.&text=Middleware%20functions%20can%20perform%20the,request%20and%20the%20response%20objects.

API:

Databases:
Relational (SQL) VS non-relational (No-SQL) databases:
Relational databases are held in the traditional chart like formats whereas non-relational are held in documents. 
In this sense, A “collection” of “documents” in a MongoDB database is analogous to a “table” of “rows” in a relational database.
We will be using a No-SQL database (MongoDB) for this project.
When we connect to the database, we will receive a "promise" from it.For this reason we must add the .async() & .await(), to make them asynchronous
If we dont want to use try/catch and want to just use the error handler, we can use an NPM package called 'express-async-handler'. 

ORM vs. ODM :
An ORM (Object Relational Mapping) maps between an Object Model and a Relational Database. 
An ODM (Object Data Modelling) maps between an Object Model and a Document Database. 
MySQL is not an ORM it's a Relational Database, more specifically a SQL Database. MongoDB is not an ODM, it's a Document Database.
In terms of Node.js, mongodb is the native driver for interacting with a mongodb instance and mongoose is an Object modeling tool for MongoDB.
Mongoose is built on top of the mongodb driver to help programmers model their data, but Mongodb can still be used for the same purpose.
https://stackoverflow.com/questions/12261866/what-is-the-difference-between-an-orm-and-an-odm
https://stackoverflow.com/questions/28712248/difference-between-mongodb-and-mongoose

Schema:
Mongoose Timestamps: https://masteringjs.io/tutorials/mongoose/timestamps
Quick Schema example: https://mongoosejs.com/docs/index.html
schema: https://mongoosejs.com/docs/guide.html
schema types: https://mongoosejs.com/docs/schematypes.html
Videos on Schema design best practices: 
https://www.youtube.com/watch?v=leNCfU5SYR8 (longer version)
https://www.youtube.com/watch?v=QAqK-R9HUhc (shorter version)

Authentication & Encryption:
How Encryption works: https://www.youtube.com/watch?v=fbSVgC8nGz4
Never store plain text passwords, very easy to hack!
BCRYPT: is a hashing algorithm used to encrypt sensitive information (passwords, documents, etc).
        It is designed to be slower than other algorithms so that it is harder to hack using a brute force method.
        Other hashing algorithm include md5, sha1, etc.
        https://www.npmjs.com/package/bcryptjs
        https://www.youtube.com/watch?v=O6cmuiTBZVs
SALTS:  short, random sets of characters appended to the end of a user's password before it is hashed. 
        This ensures every user's password is unique, even if they are the same in plaintext.
        Salt's are usually stored in plain text along with the hashed output so the website knows what salt to use when verifying login.
        Hashing, Salts & Peppers explained: 
        https://www.youtube.com/watch?v=--tnZMuoK3E
        https://www.youtube.com/watch?v=cczlpiiu42M
To make our registerUser functionality (in userController.js), we need to encrypt our passwords and store the encryptions 

Stack Trace (error handling):
A stack trace is a report that provides information about program subroutines. 
The stack frames represent the movement of an application during the execution of the program. It traces the locations where an exception is raised.
In stack trace, each element represents a method invocation.
It is commonly used for certain kinds of debugging, where a stack trace can help software engineers figure out where a problem lies 
or how various subroutines work together during execution.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

STATUSES
404 - not found
200 - OK
400 - Bad request, client error (server cant understand)
401 - Unauthorized
500 - server error

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

FILES & FOLDERS

MERN-TUTORIAL/ (root/main)

node_modules (root): Created by intalling express. Contains backend dependencies (Express) in the root folder. 
.env: Contains environment variables that are used in front and backend. Install dotenv to use .env file in server.
      Remember to restart server anytime you change or add something to the .env file 
.gitignore: This document specifies the files that will be ignored (not included) when uploaded to the GIT repository
package-lock.json: Created by intalling express.
package.json: Created by using 'npm init' in cmd line. Shows dependencies & devDependencies downloaded. 
              Also where you can put scripts.

backend/

server.js: Basic express server.
config/db.js: connects to MongoDB database created (linked in .env file under variable 'MONGO_URI') using Mongoose

models: The 'models' folder is where we define any resources we have (blog posts, to do's, etc., whatever we have in our application)
        It's files is where we define our schemas, which will be the fields for particular resources
        The schema is modelled using Mongoose.
models/goalModel.js:  goal schema. user, text and timestamp properties.
models/userModel.js:  user schema. name, e,ail, password timestamp properties.

routes: Imports these functions from the controller and protects the routes using the authentication middleware.
routes/goalRoutes.js: 4 protected routes (2x '/' & 2x '/:id') with functions (getGoals/get, setGoal/post, updateGoal/put, deleteGoal/delete - AKA CRUD method). 
                      Id of user in route is needed to find the goal for that specific user so it can be updated or deleted.
routes/userRoutes.js: 3 routes, 1 protected ('/', '/login', '/me') with functions (registerUser/post, loginUser/post, getMe/get)

middleware:  folder holds functions that execute during the req, res cycle (when client makes request)
middleware/authMiddleware.js: Uses JWT for authorization. If the token exists and is a bearer token it will be decoded through verification.
                              We can then get the id of the specific user from the decoded token. Will throw an error if the token cannot be found or verified.
middleware/errorMiddleware.js: Custom error handler that overwrites the default express errorHandler. 
                               Returns status code 400 or 500, along with a json object with a message and stack property.
                               Uses NPM package (express-async-handler) to handle errors instead of try-catch method for asynchronous functions

controllers: Defines the route functions (using mongoose methods); performs CRUD operations that are used on the database.
controllers/goalController.js: getGoals (Mongoose method: .find())
                               setGoal ((Mong. method: .create())
                               updateGoal (Mong. methods: .findById() & Goal.findByIdAndUpdate())
                               deleteGoal (Mong. method: .findById())
controllers/userController.js: registerUser (Mong. methods: .findOne() & .create())
                               loginUser (Mong. methods: .findOne()
                               getMe
                               generateToken

Since the front end has many files I will just speak on the ones most relevant to the project
frontend/





static folder (build folder for react): The static folder goes in the frontend/build folder, this is where react builds the static assets for deployment.






